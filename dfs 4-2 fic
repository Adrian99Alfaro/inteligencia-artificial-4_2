"""
Cada elemento de este diccionario contiene una posicion y como valor tiene
el nombre de su elemento padre en el arbol

                  a
               /  |  \
              b   c   d
             / \  |  / \
            e   f h i   j
            |   | |     |
            k   m g     l
               / \
              n   o

"""
valores={ "2":"1", "3":"1", "4":"1", "5":"2", "6":"2", "8":"3", "9":"4", "10":"4", "11":"5", "13":"6", "7":"8", "12":"10",
    "14":"13", "15":"13"
}
 
# variable que contiene el camino recorrido hasta llegar a la letra a buscar
camino=[]
 
def buscar(inicio,valorBuscar):
    """
    Funcion recursiva para buscar en profundidad
    Tiene que recibir:
        - el valor inicial donde empezar a buscar
        - el valor a buscar en su estructura
    Devuelve el valor a buscar o 0 si no lo encuentra
    """
    camino.append(inicio)
 
    # si encontramos el elemento, lo devolvemos
    if inicio==valorBuscar:
        return valorBuscar
 
    # recorremos todos los elementos en busca del valor de inicio
    for k,v in valores.items():
 
        # si el valor del elemento tiene como padre al valor de inicio
        if v==inicio:
 
            # llamamos a la funci√≥n recursivamente enviando el nuevo padre
            
            result=buscar(k,valorBuscar)
 
            # si hemos recibido algun resultado es que hemos encontrado el
            # elemento que buscamos
            if result:
                return result
 
    camino.pop()
    # si llegamos aqui, es que hemos llegado al final de una profundidad
    return 0 
print("     1\n  /  |  \ \n 2   3   4 \n/ \  |  / \ \n5  6 8 9   10 \n|  |  \     | \n11 13  7    12 \n  / \ \n 14 15")
origen = input("Ingrese nodo origen:")
destino = input("Ingrese nodo destino:") 
int(origen)
int(destino)
result=buscar(origen,destino)
if result:
    print(camino)
else:
    print("no encontrado")
